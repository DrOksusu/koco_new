/**
 * Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•Îêú pre-signed URLÏùÑ ÏàúÏàòÌïú S3 URLÎ°ú Î≥ÄÌôòÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixPresignedUrls() {
  try {
    console.log('üîß Fixing pre-signed URLs in database...\n');

    // pre-signed URLÏù¥ Ìè¨Ìï®Îêú Î†àÏΩîÎìú Ï∞æÍ∏∞
    const analyses = await prisma.xrayAnalysis.findMany({
      where: {
        OR: [
          {
            originalImageUrl: {
              contains: 'X-Amz-Signature'
            }
          },
          {
            annotatedImageUrl: {
              contains: 'X-Amz-Signature'
            }
          }
        ]
      }
    });

    console.log(`üìã Found ${analyses.length} records with pre-signed URLs\n`);

    if (analyses.length === 0) {
      console.log('‚úÖ No records to fix!');
      return;
    }

    let fixedCount = 0;

    for (const analysis of analyses) {
      console.log(`\nüîß Fixing record ID: ${analysis.id}`);

      const updates = {};

      // originalImageUrl Ï†ïÎ¶¨
      if (analysis.originalImageUrl && analysis.originalImageUrl.includes('?')) {
        const cleanUrl = analysis.originalImageUrl.split('?')[0];
        updates.originalImageUrl = cleanUrl;
        console.log(`   Original: ${analysis.originalImageUrl.substring(0, 100)}...`);
        console.log(`   Cleaned:  ${cleanUrl}`);
      }

      // annotatedImageUrl Ï†ïÎ¶¨
      if (analysis.annotatedImageUrl && analysis.annotatedImageUrl.includes('?')) {
        const cleanUrl = analysis.annotatedImageUrl.split('?')[0];
        updates.annotatedImageUrl = cleanUrl;
        console.log(`   Annotated: ${analysis.annotatedImageUrl.substring(0, 100)}...`);
        console.log(`   Cleaned:   ${cleanUrl}`);
      }

      // ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ
      if (Object.keys(updates).length > 0) {
        await prisma.xrayAnalysis.update({
          where: { id: analysis.id },
          data: updates
        });
        fixedCount++;
        console.log(`   ‚úÖ Updated successfully`);
      }
    }

    console.log('\n' + '='.repeat(80));
    console.log(`‚úÖ Fixed ${fixedCount} records!`);
    console.log('='.repeat(80));

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixPresignedUrls();
