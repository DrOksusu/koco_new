/**
 * S3 Î≤ÑÌÇ∑ CORS ÏÑ§Ï†ï ÌôïÏù∏ Ïä§ÌÅ¨Î¶ΩÌä∏
 *
 * ÏÇ¨Ïö©Î≤ï:
 * node scripts/check-s3-cors.js
 */

const { S3Client, GetBucketCorsCommand } = require('@aws-sdk/client-s3');

// .env ÌååÏùº Î°úÎìú
require('dotenv').config();

const s3Client = new S3Client({
  region: process.env.AWS_REGION || 'ap-northeast-2',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

const bucketName = process.env.S3_BUCKET_NAME || 'koco-dental-files';

async function checkCORS() {
  try {
    console.log(`üìã Checking CORS configuration for bucket: ${bucketName}\n`);

    const command = new GetBucketCorsCommand({
      Bucket: bucketName,
    });

    const response = await s3Client.send(command);

    console.log('‚úÖ Current CORS configuration:');
    console.log('='.repeat(60));
    console.log(JSON.stringify(response.CORSRules, null, 2));
    console.log('='.repeat(60));

    // CORS Í∑úÏπô Í≤ÄÏ¶ù
    console.log('\nüîç Validation:');

    const hasGetMethod = response.CORSRules.some(rule =>
      rule.AllowedMethods.includes('GET')
    );
    const hasHeadMethod = response.CORSRules.some(rule =>
      rule.AllowedMethods.includes('HEAD')
    );
    const hasLocalhostOrigin = response.CORSRules.some(rule =>
      rule.AllowedOrigins.some(origin =>
        origin.includes('localhost') || origin === '*'
      )
    );

    console.log(hasGetMethod ? '‚úÖ GET method allowed' : '‚ùå GET method NOT allowed');
    console.log(hasHeadMethod ? '‚úÖ HEAD method allowed' : '‚ùå HEAD method NOT allowed');
    console.log(hasLocalhostOrigin ? '‚úÖ localhost origin allowed' : '‚ùå localhost origin NOT allowed');

    if (!hasGetMethod || !hasHeadMethod || !hasLocalhostOrigin) {
      console.log('\n‚ö†Ô∏è  CORS configuration needs to be updated!');
      console.log('Run: npm run s3:cors');
    } else {
      console.log('\n‚úÖ CORS configuration looks good!');
    }

  } catch (error) {
    if (error.name === 'NoSuchCORSConfiguration') {
      console.log('‚ùå No CORS configuration found!');
      console.log('\nüí° To add CORS configuration, run:');
      console.log('   npm run s3:cors');
    } else {
      console.error('‚ùå Error checking CORS:', error);
      console.error('\nüí° Possible issues:');
      console.error('  1. Check AWS credentials in .env file');
      console.error('  2. Verify IAM user has s3:GetBucketCors permission');
      console.error('  3. Ensure bucket name is correct');
    }
    process.exit(1);
  }
}

checkCORS();
