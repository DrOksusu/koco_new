name: Deploy KOCO Next.js App

on:
  push:
    branches:
      - master  # master 브랜치에 push될 때 자동 실행
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker 로그인 (Docker Hub)
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 3. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build --no-cache --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/koco_new:$(date +%Y%m%d) .
          docker tag ${{ secrets.DOCKER_USERNAME }}/koco_new:$(date +%Y%m%d) ${{ secrets.DOCKER_USERNAME }}/koco_new:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/koco_new:$(date +%Y%m%d)
          docker push ${{ secrets.DOCKER_USERNAME }}/koco_new:latest

      # 4. Nginx 설정 파일 업데이트
      - name: Update Nginx Configuration
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > aws_key.pem
          chmod 400 aws_key.pem

          # nginx 설정 파일을 AWS 서버로 복사
          scp -o StrictHostKeyChecking=no -i aws_key.pem nginx/koco.me ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:/tmp/koco.me

          # nginx 설정 업데이트 및 재시작
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} << 'EOF'
            echo "Updating nginx configuration..."

            # 백업 생성
            sudo cp /etc/nginx/sites-available/koco.me /etc/nginx/sites-available/koco.me.backup.$(date +%Y%m%d_%H%M%S)

            # 새 설정 파일 복사
            sudo mv /tmp/koco.me /etc/nginx/sites-available/koco.me

            # nginx 설정 테스트
            sudo nginx -t

            # nginx 재시작
            if [ $? -eq 0 ]; then
              sudo systemctl reload nginx
              echo "Nginx configuration updated and reloaded successfully!"
            else
              echo "Nginx configuration test failed! Rolling back..."
              sudo cp /etc/nginx/sites-available/koco.me.backup.$(date +%Y%m%d)* /etc/nginx/sites-available/koco.me
              exit 1
            fi
          EOF

      # 5. AWS 서버에 Docker 이미지 배포
      - name: Deploy to AWS Server
        run: |
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} << 'EOF'
            echo "AWS login successful"

            # Docker Hub 로그인
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

            # 배포 디렉토리로 이동
            mkdir -p /opt/koco-new && cd /opt/koco-new

            # .env 파일 생성
            cat > .env <<ENVEOF
            NODE_ENV=production
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          ENVEOF

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/koco_new:$(date +%Y%m%d)

            # 기존 컨테이너 중지 및 삭제
            docker stop koco_new || true
            docker rm koco_new || true

            # 새 컨테이너 실행
            docker run -d -p 3002:3000 \
              --name koco_new \
              --restart=always \
              --ulimit nofile=65535:65535 \
              --ulimit nproc=65535:65535 \
              --security-opt seccomp=unconfined \
              --security-opt apparmor=unconfined \
              --env-file .env \
              -v koco_new_volume:/app/uploads \
              ${{ secrets.DOCKER_USERNAME }}/koco_new:$(date +%Y%m%d)

            # 사용하지 않는 이미지 정리
            docker image prune -f

            echo "Deployment completed successfully!"
          EOF

      # 6. 배포 확인
      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} << 'EOF'
            echo "=== Deployment Verification ==="

            # 컨테이너 존재 확인 (실행 중이든 아니든)
            if docker ps -a | grep -q koco_new; then
              echo "✓ Container 'koco_new' exists"

              # 컨테이너 상태 확인
              if docker ps | grep -q koco_new; then
                echo "✓ Container 'koco_new' is running"
                docker ps | grep koco_new
              else
                echo "✗ Container 'koco_new' exists but NOT running"
                docker ps -a | grep koco_new
              fi

              # 로그 확인 (항상 출력)
              echo ""
              echo "=== Container Logs (last 50 lines) ==="
              docker logs --tail 50 koco_new 2>&1 || echo "Could not fetch logs"
            else
              echo "✗ Container 'koco_new' does not exist!"
              echo "This is the first deployment or container was manually deleted."
              exit 1
            fi

            echo ""
            echo "=== Deployment verification complete ==="
          EOF

      # 7. AWS 키 파일 삭제
      - name: Clean up
        if: always()
        run: rm -rf aws_key.pem
